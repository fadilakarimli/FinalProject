@model IEnumerable<FinalProjectConsume.Models.Amenity.Amenity>

@{
    ViewData["Title"] = "Amenity List";
    var amenities = Model.ToList();
}

<head>
    <!-- SweetAlert2 -->
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.css" />
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
</head>

<div class="container" style="margin-left:300px; margin-top:50px;">
    <h2>@ViewData["Title"]</h2>

    <p>
        <a asp-action="Create" class="btn btn-success">Create</a>
    </p>

    <table class="table table-bordered table-striped">
        <thead>
            <tr>
                <th>Name</th>
                <th>Operations</th>
            </tr>
        </thead>
        <tbody>
            @for (int i = 0; i < amenities.Count; i++)
            {
                <tr id="amenity-row-@amenities[i].Id">
                    <td>@amenities[i].Name</td>
                    <td>
                        <a asp-action="Detail" asp-route-id="@amenities[i].Id" class="btn btn-info btn-sm">Detail</a>
                        <a asp-action="Edit" asp-route-id="@amenities[i].Id" class="btn btn-warning btn-sm">Edit</a>
                        <button type="button" class="btn btn-danger btn-sm btn-delete" data-id="@amenities[i].Id">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>

<script>
    document.addEventListener("DOMContentLoaded", function () {
        const deleteButtons = document.querySelectorAll(".btn-delete");

        const swalWithBootstrapButtons = Swal.mixin({
            customClass: {
                confirmButton: "btn btn-success me-2",
                cancelButton: "btn btn-danger"
            },
            buttonsStyling: false
        });

        deleteButtons.forEach(button => {
            button.addEventListener("click", function () {
                const id = this.getAttribute("data-id");

                swalWithBootstrapButtons.fire({
                    title: "Are you sure you want to delete this amenity?",
                    icon: "warning",
                    showCancelButton: true,
                    confirmButtonText: "Yes, delete it!",
                    cancelButtonText: "No, cancel!",
                    reverseButtons: true
                }).then((result) => {
                    if (result.isConfirmed) {
                        fetch(`/Admin/Amenity/Delete/${id}`, {
                            method: "POST"
                        })
                            .then(response => {
                                if (response.ok) {
                                    document.getElementById(`amenity-row-${id}`).remove();
                                    swalWithBootstrapButtons.fire({
                                        title: "Deleted!",
                                        text: "Amenity was successfully deleted.",
                                        icon: "success"
                                    });
                                } else {
                                    return response.text().then(text => {
                                        throw new Error(text || "Failed to delete amenity.");
                                    });
                                }
                            })
                            .catch(error => {
                                swalWithBootstrapButtons.fire({
                                    title: "Error!",
                                    text: error.message,
                                    icon: "error"
                                });
                            });
                    } else if (result.dismiss === Swal.DismissReason.cancel) {
                        swalWithBootstrapButtons.fire({
                            title: "Cancelled",
                            text: "Amenity is safe :)",
                            icon: "info"
                        });
                    }
                });
            });
        });
    });
</script>
